"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRemote = void 0;
const devkit_1 = require("@nx/devkit");
const project_name_and_root_utils_1 = require("@nx/devkit/src/generators/project-name-and-root-utils");
const semver_1 = require("semver");
const check_remote_exists_1 = require("./check-remote-exists");
const version_utils_1 = require("../../utils/version-utils");
const remote_1 = require("../../remote/remote");
const test_runners_1 = require("../../../utils/test-runners");
async function addRemote(tree, schema) {
    const tasks = [];
    const remote = (0, check_remote_exists_1.getRemoteIfExists)(tree, schema.remote);
    let projectRoot, remoteName;
    if (!remote) {
        const installedAngularVersionInfo = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
        if ((0, semver_1.lt)(installedAngularVersionInfo.version, '14.1.0') &&
            schema.standalone) {
            throw new Error((0, devkit_1.stripIndents) `The "standalone" option is only supported in Angular >= 14.1.0. You are currently using ${installedAngularVersionInfo.version}.
    You can resolve this error by removing the "standalone" option or by migrating to Angular 14.1.0.`);
        }
        const remoteGeneratorCallback = await (0, remote_1.default)(tree, {
            name: schema.remote,
            directory: schema.remoteDirectory,
            host: schema.host,
            standalone: schema.standalone,
            projectNameAndRootFormat: schema.projectNameAndRootFormat ?? 'derived',
            unitTestRunner: schema.unitTestRunner ?? test_runners_1.UnitTestRunner.Jest,
            e2eTestRunner: schema.e2eTestRunner ?? test_runners_1.E2eTestRunner.Cypress,
            skipFormat: true,
        });
        tasks.push(remoteGeneratorCallback);
        const { projectName, projectRoot: remoteRoot } = await (0, project_name_and_root_utils_1.determineProjectNameAndRootOptions)(tree, {
            name: schema.remote,
            directory: schema.remoteDirectory,
            projectType: 'application',
            projectNameAndRootFormat: schema.projectNameAndRootFormat ?? 'derived',
            callingGenerator: '@nx/angular:federate-module',
        });
        projectRoot = remoteRoot;
        remoteName = projectName;
    }
    else {
        projectRoot = remote.root;
        remoteName = remote.name;
    }
    // TODO(Colum): add implicit dependency if the path points to a file in a different project
    return {
        tasks,
        projectRoot,
        remoteName,
    };
}
exports.addRemote = addRemote;
