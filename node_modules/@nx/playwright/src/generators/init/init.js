"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../utils/versions");
const child_process_1 = require("child_process");
async function initGenerator(tree, options) {
    const tasks = [];
    if (!options.skipPackageJson) {
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@nx/playwright': versions_1.nxVersion,
            // required since used in playwright config
            '@nx/devkit': versions_1.nxVersion,
            '@playwright/test': versions_1.playwrightVersion,
        }));
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    if (tree.exists('.vscode/extensions.json')) {
        (0, devkit_1.updateJson)(tree, '.vscode/extensions.json', (json) => {
            json.recommendations ??= [];
            const recs = new Set(json.recommendations);
            recs.add('ms-playwright.playwright');
            json.recommendations = Array.from(recs);
            return json;
        });
    }
    else {
        tree.write('.vscode/extensions.json', JSON.stringify({
            recommendations: ['ms-playwright.playwright'],
        }, null, 2));
    }
    if (!options.skipInstall) {
        tasks.push(() => {
            devkit_1.output.log({
                title: 'Ensuring Playwright is installed.',
                bodyLines: ['use --skipInstall to skip installation.'],
            });
            const pmc = (0, devkit_1.getPackageManagerCommand)();
            (0, child_process_1.execSync)(`${pmc.exec} playwright install`, { cwd: devkit_1.workspaceRoot });
        });
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
