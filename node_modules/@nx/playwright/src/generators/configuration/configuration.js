"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const path = require("path");
const init_1 = require("../init/init");
const add_linter_1 = require("../../utils/add-linter");
async function configurationGenerator(tree, options) {
    const tasks = [];
    tasks.push(await (0, init_1.default)(tree, {
        skipFormat: true,
        skipPackageJson: options.skipPackageJson,
    }));
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files'), projectConfig.root, {
        offsetFromRoot: (0, devkit_1.offsetFromRoot)(projectConfig.root),
        projectRoot: projectConfig.root,
        webServerCommand: options.webServerCommand ?? null,
        webServerAddress: options.webServerAddress ?? null,
        ...options,
    });
    addE2eTarget(tree, options);
    setupE2ETargetDefaults(tree);
    tasks.push(await (0, add_linter_1.addLinterToPlaywrightProject)(tree, {
        project: options.project,
        linter: options.linter,
        skipPackageJson: options.skipPackageJson,
        js: options.js,
        directory: options.directory,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject ?? projectConfig.root === '.',
    }));
    if (options.js) {
        (0, devkit_1.toJS)(tree);
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.configurationGenerator = configurationGenerator;
function setupE2ETargetDefaults(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!nxJson.namedInputs) {
        return;
    }
    // E2e targets depend on all their project's sources + production sources of dependencies
    nxJson.targetDefaults ??= {};
    const productionFileSet = !!nxJson.namedInputs?.production;
    nxJson.targetDefaults.e2e ??= {};
    nxJson.targetDefaults.e2e.inputs ??= [
        'default',
        productionFileSet ? '^production' : '^default',
    ];
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
function addE2eTarget(tree, options) {
    const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if (projectConfig?.targets?.e2e) {
        throw new Error(`Project ${options.project} already has an e2e target.
Rename or remove the existing e2e target.`);
    }
    projectConfig.targets ??= {};
    projectConfig.targets.e2e = {
        executor: '@nx/playwright:playwright',
        outputs: [`{workspaceRoot}/dist/.playwright/${projectConfig.root}`],
        options: {
            config: `${projectConfig.root}/playwright.config.${options.js ? 'js' : 'ts'}`,
        },
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
}
exports.default = configurationGenerator;
